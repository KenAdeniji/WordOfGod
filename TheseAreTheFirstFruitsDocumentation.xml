<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TheseAreTheFirstFruits</name>
    </assembly>
    <members>
        <member name="T:WordEngineering.TheseAreTheFirstFruits">
            <summary>TheseAreTheFirstFruits.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.FilenameConfigurationXml">
            <summary>The configuration XML filename.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.PatternFilename">
            <summary>The Pattern Filename.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.XPathDatabaseConnectionString">
            <summary>The XPath database connection string.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.XPathImportPatternFilename">
            <summary>The XPath import pattern filename.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.XPathPatternFilename">
            <summary>The XPath Pattern Filename.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.XPathSQLTable">
            <summary>The XPath for the SQL table.</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.XPathTheseAreTheFirstFruitsDatabase">
            <summary>The XPath database(s).</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.XPathTheseAreTheFirstFruitsTable">
            <summary>The XPath table(s).</summary>
        </member>
        <member name="F:WordEngineering.TheseAreTheFirstFruits.DatabaseConnectionString">
            <summary>The database connection string.</summary>
        </member>
        <member name="M:WordEngineering.TheseAreTheFirstFruits.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">Command-line arguments.</param>
        </member>
        <member name="T:WordEngineering.UtilityClass">
            <summary>UtilityClass.</summary>   
        </member>
        <member name="M:WordEngineering.UtilityClass.FullName(System.Object)">
            <summary>Full Name.</summary>
            <param name="instance">An object, a class instance.</param>  
        </member>
        <member name="M:WordEngineering.UtilityClass.SimpleName(System.Object)">
            <summary>Simple Name.</summary>
            <param name="instance">An object, a class instance.</param>  
        </member>
        <member name="M:WordEngineering.UtilityClass.GetType(System.Object)">
            <summary>GetType.</summary>
            <param name="instance">An object, a class instance.</param>  
        </member>
        <member name="T:WordEngineering.UtilityCollection">
            <summary>UtilityCollection will offer collection services.</summary>
            <remarks>UtilityCollection will offer collection services.</remarks>
        </member>
        <member name="F:WordEngineering.UtilityCollection.ElementSeparator">
            <summary>The element separator.</summary>
        </member>
        <member name="M:WordEngineering.UtilityCollection.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">A list of command line arguments</param>
        </member>
        <member name="M:WordEngineering.UtilityCollection.ToString(System.Collections.IEnumerable)">
            <summary>Concatenate index and values</summary>
            <param name="list">Supports a simple iteration over a collection.</param>   
            <code>
             <example>
              ArrayList arrayListBibleBook = new ArrayList();
              arrayListBibleBook.Add("Genesis");
              arrayListBibleBook.Add("Exodus");
              arrayListBibleBook.Add("Leveticus");
              arrayListBibleBook.Add("Numbers");
              arrayListBibleBook.Add("Deuteronomy");   
              System.Console.WriteLine("Bible Books Collection: {0}", UtilityCollection.ToString(arrayListBibleBook));
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityCollection.IndexOf(System.String[][],System.String)">
            <summary>Returns the index of the first occurrence of a value in a two-dimensional Array.</summary>
            <param name="array">The array.</param>
            <param name="key">The key.</param>  
        </member>
        <member name="M:WordEngineering.UtilityCollection.IndexOf(System.String[][],System.String,System.Int32,System.Int32)">
            <summary>Returns the index of the first occurrence of a value in a two-dimensional Array.</summary>
            <param name="array">The array.</param>
            <param name="key">The key.</param>  
            <param name="rankKey">The array dimension's key.</param>    
            <param name="rankValue">The array dimension's value.</param>      
        </member>
        <member name="M:WordEngineering.UtilityCollection.NameValueCollectionExtract(System.Collections.Specialized.NameValueCollection,System.String[]@,System.String[][]@)">
            <summary>NameValueCollection: Extract the key and value.</summary>
            <param name="nameValueCollection">The name value collection.</param>
            <param name="nameValueCollectionKey">The name value collection key.</param>
            <param name="nameValueCollectionValue">The name value collection value.</param>  
        </member>
        <member name="T:WordEngineering.UtilityDatabase">
            <summary>Utility Database will manage database connections.</summary>
            <remarks>
             The methods will include DatabaseConnectionInitialize(), DatabaseConnectionHouseKeeping().
            </remarks>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.XmlMarkupCharacters">
            <summary>The XmlMarkupCharacters.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DelimiterCharSplit">
            <summary>The DelimiterCharSplit.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseColumnOrdinalSequenceOrderId">
            <summary>The information schema database classification rank name.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.PatternFileXmlRankXPath">
            <summary>The pattern file xml.</summary>   
        </member>
        <member name="F:WordEngineering.UtilityDatabase.PatternFileXmlRankDefault">
            <summary>The pattern file xml default.</summary>   
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseUpdateTemplate">
            <summary>The information schema table.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateInsert">
            <summary>The database template insert.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateTruncate">
            <summary>The database template truncate.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateIdentityMaximum">
            <summary>The database template identity maximum.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateIdentitySet">
            <summary>The database template identity set.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateIdentityInsertOff">
            <summary>The database template identity insert off.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateIdentityInsertOn">
            <summary>The database template identity insert on.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateSQLUpdateScriptureReferenceURI">
            <summary>The SQL Update statement for the ScriptureReferenceURI.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DelimiterStringSplit">
            <summary>The DelimiterStringSplit.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateSQLUpdateScriptureReferenceURINull">
            <summary>The SQL Update statement for the ScriptureReferenceURI.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateSQLUpdateScriptureReferenceURISet">
            <summary>The SQL Update statement for the ScriptureReferenceURI.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.DatabaseTemplateSQLSet">
            <summary>The SQL Update statement for the ScriptureReferenceURI.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationDatabaseRankName">
            <summary>The information schema database classification rank name.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationDatabaseRankCondition">
            <summary>The information schema database classification rank condition.</summary>   
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationTableRankName">
            <summary>The information schema table classification rank name.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationTableRankCondition">
            <summary>The information schema table classification rank condition.</summary>   
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaTableParameterTableName">
            <summary>The information schema table parameter.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnColumnName">
            <summary>The information schema column name.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnOrdinalPosition">
            <summary>The information schema column ordinal position.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnColumnDefault">
            <summary>The information schema column default.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnIsNullable">
            <summary>The information schema column is nullable.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnDataType">
            <summary>The information schema column data type.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnNameDatabase">
            <summary>The information schema column name database.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnNameTable">
            <summary>The information schema column name table.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnCharacterMaximumLength">
            <summary>The information schema column character maximum length.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnConstraintType">
            <summary>The information schema column constraint type.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnConstraintcolumnNamePrimary">
            <summary>The information schema column constraint type Primary Key.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnConstraintUnique">
            <summary>The information schema column constraint type Unique.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaColumnSQL">
            <summary>The information schema column query.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationDatabase">
            <summary>The information schema classification database.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationTable">
            <summary>The information schema classification table.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaScriptureReference">
            <summary>The information schema scripture reference.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationDatabaseDefault">
            <summary>The information schema schemata classification database default.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaClassificationTableDefault">
            <summary>The information schema schemata classification table default.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemacolumnNamePrimaryColumnSQL">
            <summary>The information schema primary key column(s) query.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaSQLDatabase">
            <summary>The information schema database schemata.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaSQLTable">
            <summary>The information schema table.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.InformationSchemaTable">
            <summary>The information schema table.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLNull">
            <summary>The SQL Pattern column value.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternColumnValue">
            <summary>The SQL Pattern column value.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternSetColumn">
            <summary>The SQL Pattern set column.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternSetColumnNull">
            <summary>The SQL Pattern set column to Null.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternIdentityInsertOff">
            <summary>The SQL Pattern Identity Insert On.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternIdentityInsertOn">
            <summary>The SQL Pattern Identity Insert On.</summary>   
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternInsert">
            <summary>The SQL Pattern Insert.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternInsertIdentity">
            <summary>The SQL Pattern Insert Identity.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternSelect">
            <summary>The SQL Pattern Select.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternSelectIdentity">
            <summary>The SQL Pattern Select Identity.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternSelectIdentityTable">
            <summary>The SQL Pattern Select Identity for Table.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternUpdate">
            <summary>The SQL Pattern Update.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternScalar">
            <summary>The SQL Pattern Scalar.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternScalarUnique">
            <summary>The SQL Pattern Scalar unique.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLPatternSelectInsertUpdate">
            <summary>The SQL Pattern Select Insert Update.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityDatabase.SQLSelectTop1">
            <summary>SQLSelectTop1.</summary>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">A list of command line arguments</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseConnectionInitialize(System.String,System.String@)">
            <summary>Initializes a new instance of the OleDbConnection class.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              OleDbConnection oleDbConnection          = null;
              oleDbConnection = UtilityDatabase.DatabaseConnectionInitialize( databaseConnectionString, ref exceptionMessage );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseConnectionHouseKeeping(System.Data.OleDb.OleDbConnection,System.String@)">
            <summary>Closes the connection to the data source. This is the preferred method of closing any open connection.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              OleDbConnection oleDbConnection          = null;
              oleDbConnection = UtilityDatabase.DatabaseConnectionInitialize( databaseConnectionString, ref exceptionMessage );
              UtilityDatabase.DatabaseConnectionHouseKeeping( oleDbConnection, ref exceptionMessage );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DisplayOleDbErrorCollection(System.Data.OleDb.OleDbException)">
            <summary>Gets a collection of one or more OleDbError objects that give detailed information about exceptions generated by the .NET Framework Data Provider for OLE DB.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              OleDbConnection oleDbConnection          = null;
              try
              {
               oleDbConnection = new OleDbConnection(databaseConnectionString);
               oleDbConnection.Open();
              }//try
              catch (OleDbException exception)
              {
               exceptionMessage = DisplayOleDbErrorCollection( exception );
               System.Console.WriteLine("OLEDbException: {0}", exceptionMessage);
              }
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseQuery(System.String,System.String@,System.String)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              string          commandText              = "SELECT 'Language: ' + @@LANGUAGE + CHAR(13) + CHAR(10) + 'Server Name: ' + @@ServerName + CHAR(13) + CHAR(10) + 'Service Name: ' + @@ServiceName + CHAR(13) + CHAR(10) + 'Version: ' + @@Version";
              object          commandReturn            = null;
              commandReturn  = UtilityDatabase.DatabaseQuery( databaseConnectionString, ref exceptionMessage, commandText );
              System.Console.WriteLine("Query: {0}\n{1}", commandText, commandReturn);
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseQuery(System.String,System.String@,System.String,System.Data.CommandType)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              string          commandText              = "master..xp_msver";
              object          commandReturn            = null;
              commandReturn  = UtilityDatabase.DatabaseQuery( databaseConnectionString, ref exceptionMessage, commandText, CommandType.StoredProcedure );
              System.Console.WriteLine("Query: {0}\n{1}", commandText, commandReturn);
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseQuery(System.Data.OleDb.OleDbConnection,System.String@,System.String,System.Data.CommandType)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              OleDbConnection oleDbConnection          = null;
              string          exceptionMessage         = null;
              string          commandText              = "master..xp_msver";
              object          commandReturn            = null;
              oleDbConnection = UtilityDatabase.DatabaseConnectionInitialize
              ( 
                 DatabaseConnectionString, 
                 ref exceptionMessage 
              );
              commandReturn  = UtilityDatabase.DatabaseQuery( oleDbConnection, ref exceptionMessage, commandText, CommandType.StoredProcedure );
              System.Console.WriteLine("Query: {0}\n{1}", commandText, commandReturn);
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseQuery(System.String,System.String@,System.Data.DataSet@,System.String,System.Data.CommandType)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <param name="databaseConnectionString">The database connection string, "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;"</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="dataSet">The data set.</param>
            <param name="commandText">The command text.</param>
            <param name="commandType">The command type.</param>
            <code>
             <example>
              string      databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;";
              string      exceptionMessage         = null;
              string      commandText              = "master..xp_msver";
              CommandType commandType              = "CommandType.StoredProcedure";  
              DataSet     dataSet                  = null;
              UtilityDatabase.DatabaseQuery
              ( 
                   databaseConnectionString, 
               ref exceptionMessage, 
                   dataSet, 
                   commandText, 
                   CommandType.StoredProcedure 
              );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseQuery(System.String,System.String@,System.Data.IDataReader@,System.String,System.Data.CommandType)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <param name="databaseConnectionString">The database connection string, "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;"</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="iDataReader">The data reader.</param>
            <param name="commandText">The command text.</param>
            <param name="commandType">The command type.</param>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              string          commandText              = "master..xp_msver";
              IDataReader     iDataReader              = null;
              CommandType     commandType              = "CommandType.StoredProcedure";  
              UtilityDatabase.DatabaseQuery
              ( 
                   databaseConnectionString, 
               ref exceptionMessage, 
                   oleDbDataReader,
                   commandText, 
                   CommandType.StoredProcedure 
              );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseQuerySQLSelectTop1(System.String@,System.String@,System.Object@,System.String@,System.String@,System.String@,System.String@)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <param name="databaseConnectionString">The database connection string, "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;"</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="databaseReturnValue">The database return Value.</param>
            <param name="selectColumn">The select column.</param>
            <param name="selectSource">The select source.</param>
            <param name="whereColumn">The where column.</param>
            <param name="whereValue">The where value.</param>
            <code>
             <example>
              string      databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=master;Integrated Security=SSPI;";
              string      exceptionMessage         = null;
              string      commandText              = "master..xp_msver";
              CommandType commandType              = "CommandType.StoredProcedure";  
              DataSet     dataSet                  = null;
              UtilityDatabase.DatabaseQuery
              ( 
                   databaseConnectionString, 
               ref exceptionMessage, 
                   dataSet, 
                   commandText, 
                   CommandType.StoredProcedure 
              );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseNonQuery(System.Data.OleDb.OleDbConnection,System.String@,System.String)">
            <summary>Executes the non query statement.</summary>
            <param name="oleDbConnection">The database connection.</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="commandText">The command text.</param>
            <code>
             <example>
              OleDbConnection oleDbConnection   = new OleDbConnection("");
              string          exceptionMessage  = null;
              string          commandText       = "master..xp_msver";
              UtilityDatabase.DatabaseNonQuery
              ( 
                   oleDbConnection, 
               ref exceptionMessage, 
                   commandText, 
              );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.OleDbInfoMessage(System.Object,System.Data.OleDb.OleDbInfoMessageEventArgs)">
            <summary>The information message event occurs when a data source sends warnings and information messages.</summary>
            <param args="sender">The data source.</param>    
            <param args="args">A collection of messages from the data source.</param>    
            <code>
             <example>
            <code>
             <example>
              string databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              OleDbConnection oleDbConnection = null;
              oleDbConnection = new OleDbConnection(databaseConnectionString);
              oleDbConnection.StateChange += new StateChangeEventHandler(OnOleDbStateChange);
              oleDbConnection.Open();
              oleDbConnection.Close();
              }//try
              catch (OleDbException exception)
              {
               System.Console.WriteLine("OLEDbException: {0}", exception.Message);
              }
              catch (Exception exception)
              {
               System.Console.WriteLine("Exception: {0}", exception.Message);
              }
             </example>  
            </code>  
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.OnOleDbStateChange(System.Object,System.Data.StateChangeEventArgs)">
            <summary>The StateChange event occurs when the state of a Connection changes.</summary>
            <param name="sender">The data source.</param>  
            <param name="args">The current and original state.</param>    
            <code>
             <example>
              string databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              OleDbConnection oleDbConnection = null;
              oleDbConnection = new OleDbConnection(databaseConnectionString);
              oleDbConnection.InfoMessage += new OleDbInfoMessageEventHandler(OleDbInfoMessage);
              oleDbConnection.Open();
              oleDbConnection.Close();
              }//try
              catch (OleDbException exception)
              {
               System.Console.WriteLine("OLEDbException: {0}", exception.Message);
              }
              catch (Exception exception)
              {
               System.Console.WriteLine("Exception: {0}", exception.Message);
              }
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseUpdate(System.String,System.String@,System.Object@)">
            <summary>DatabaseUpdate</summary>
            <param name="databaseConnectionString">The database connection string.</param>  
            <param name="exceptionMessage">The exception message.</param>    
            <param name="sender">The message source.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.InformationSchemaTableQuery(System.String,System.String@,System.Object@,System.Text.StringBuilder@,System.Text.StringBuilder@,System.Text.StringBuilder@,System.Text.StringBuilder@,System.Data.DataTable@)">
            <summary>Information Schema Table Query.</summary>
            <param name="databaseConnectionString">The database connection string.</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="sender">The message source.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="sqlStatementWhere">The SQL statement Clause - Where.</param>
            <param name="sqlStatementInsert">The SQL statement Clause - Insert.</param>
            <param name="sqlStatementUpdate">The SQL statement Clause - Update.</param>
            <param name="dataTable">The data table for the table's columns.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseMaintenance(System.String,System.String@,System.String,System.String,System.String,System.String,System.String[],System.String)">
            <summary>Database Maintenance.</summary>
            <param name="databaseConnectionString">The database connection string.</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="filenameConfigurationXml">The configuration XML file name.</param>
            <param name="xPathTheseAreTheFirstFruitsDatabase">The XPath for the database(s).</param>  
            <param name="xPathTheseAreTheFirstFruitsTable">The XPath for the table(s).</param>  
            <param name="xPathSQLTable">The SQL table.</param>
            <param name="patternFileXml">The pattern for the XML file(s).</param>
            <param name="xPathImportPatternFilename">The XPath for the import pattern filename(s).</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseName(System.String,System.String@)">
            <summary>The database name(s).</summary>
            <param name="databaseConnectionString">The database connection string.</param>
            <param name="exceptionMessage">The exception message.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DatabaseName(System.String,System.String@,System.String)">
            <summary>The database name(s).</summary>
            <param name="databaseConnectionString">The database connection string.</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="databaseClassification">The database classification, for example, sample, system, user.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.TableName(System.String,System.String@,System.String)">
            <summary>The table name(s).</summary>
            <param name="databaseConnectionString">The database connection string.</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="databaseName">The name of the database.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.TableName(System.String,System.String@,System.String,System.String)">
            <summary>The database name(s).</summary>
            <param name="databaseConnectionString">The database connection string.</param>
            <param name="exceptionMessage">The exception message.</param>
            <param name="databaseName">The name of the database.</param>
            <param name="tableClassification">The database classification, for example, sample, system, user.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableRowColumn(System.Data.DataSet,System.String,System.Int32,System.String)">
            <summary>DataSetTableRowColumn.</summary>
            <param name="dataSet">The dataset.</param>
            <param name="table">The table.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableRowColumn(System.Data.DataSet,System.String,System.Int32,System.String,System.Object)">
            <summary>DataSetTableRowColumn.</summary>
            <param name="dataSet">The dataset.</param>
            <param name="table">The table.</param>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="value">The value.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumnContains(System.Data.DataSet,System.String,System.String)">
            <summary>DataSetTableColumnContains.</summary>
            <param name="dataSet">The dataset.</param>
            <param name="tableName">The name of the table.</param>
            <param name="columnName">The name of the column.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumnAdd(System.Data.DataSet,System.String,System.String)">
            <summary>DataSetTableColumnAdd.</summary>
            <param name="dataSet">The dataset.</param>
            <param name="table">The table.</param>
            <param name="column">The column.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumnIndex(System.Data.DataSet,System.String,System.String)">
            <summary>DataSetTableColumnIndex.</summary>
            <param name="dataSet">The dataSet.</param>
            <param name="tableName">The table name.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumnVisible(System.Web.UI.WebControls.DataGrid,System.String,System.Boolean)">
            <summary>DataSetTableColumnVisible.</summary>
            <param name="dataGrid">The dataGrid.</param>
            <param name="columnName">The column name.</param>
            <param name="visible">visible.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumnVisible(System.Web.UI.WebControls.DataGrid,System.Int32,System.Boolean)">
            <summary>DataSetTableColumnVisible.</summary>
            <param name="dataGrid">The dataGrid.</param>
            <param name="columnIndex">The column index.</param>
            <param name="visible">visible.</param>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataTableColumnIndex(System.Data.DataTable,System.String)">
            <summary>DataTableColumnIndex.</summary>
            <param name="dataTable">The dataTable.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataGridColumnIndex(System.Web.UI.WebControls.DataGrid,System.String)">
            <summary>DataTableColumnIndex.</summary>
            <param name="dataGrid">The dataTable.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.PrintValues(System.Data.DataSet)">
            <summary>PrintValues().</summary>
            <param name="dataSet">The dataSet.</param>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.TableIdentity(System.String,System.String@,System.String)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              string          tableName                = "master..xp_msver";
              object          commandReturn            = null;
              commandReturn  = UtilityDatabase.TableIdentity( databaseConnectionString, ref exceptionMessage, tableName );
              System.Console.WriteLine("Query: {0}\n{1}", tableName, commandReturn);
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.TableIdentity(System.String,System.String@,System.String,System.Int32@)">
            <summary>Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.</summary>
            <code>
             <example>
              int             tableIdentity            = -1;
              String          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              String          exceptionMessage         = null;
              String          tableName                = "master..xp_msver";
              object          commandReturn            = null;
              commandReturn  = UtilityDatabase.TableIdentity( databaseConnectionString, ref exceptionMessage, tableName, ref tableIdentity );
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityDatabase.TableNameColumn(System.String@,System.String@,System.String@,System.Collections.ArrayList@)">
            <summary>Table name and columns</summary>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumn(System.Data.DataSet@,System.String@,System.String@,System.Collections.ArrayList@)">
            <summary>Create DataSet with table and column names.</summary>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTableColumn(System.String@,System.Data.DataSet@,System.String@,System.String@,System.Collections.ArrayList@)">
            <summary>Create DataSet with table and column names.</summary>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetRowAdd(System.Data.DataSet@,System.String@,System.Int32@)">
            <summary>DataSetRowAdd().</summary>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.DataSetTablePrimaryKey(System.Data.DataSet@,System.String@,System.Data.DataTableCollection@,System.Data.DataColumn[][]@,System.String[]@)">
            <summary>Create DataSet with table and column names.</summary>
        </member>
        <member name="M:WordEngineering.UtilityDatabase.#cctor">
            <summary>Static.</summary>
        </member>
        <member name="T:WordEngineering.UtilityDirectory">
            <summary>UtilityDirectory.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDirectory.ArgumentIndexDirectory">
            <summary>The argument index for the directory.</summary>
        </member>
        <member name="F:WordEngineering.UtilityDirectory.ArgumentIndexFileSearchPattern">
            <summary>The argument index for the file search pattern.</summary>
        </member>
        <member name="M:WordEngineering.UtilityDirectory.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">Command-line arguments.</param>
        </member>
        <member name="M:WordEngineering.UtilityDirectory.Dir(System.String,System.String,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
             Process all files in the directory passed in, and recurse on any directories 
             that are found to process the files they contain
             ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIODirectoryClassGetDirectoriesTopic1.htm
             BibleFoundationPopulateEaston.cs public static void ProcessDirectory().
            </summary>
            <param name="directorynameSource">The source directory name.</param>
            <param name="fileSearchPattern">The file search pattern.</param>
            <param name="arrayListDirectoryname">The list of directory name(s).</param>
            <param name="arrayListFilename">The list of filename(s).</param>
        </member>
        <member name="M:WordEngineering.UtilityDirectory.WebServerFullPath(System.String@)">
            <summary>The web server full path for a given filename.</summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="T:WordEngineering.UtilityEventLog">
            <summary>The Event Log Utility.</summary>
            <remarks>Event Log.</remarks>
        </member>
        <member name="F:WordEngineering.UtilityEventLog.EventLogName">
            <summary>The name of the event log.</summary>
        </member>
        <member name="F:WordEngineering.UtilityEventLog.EventLogMachineName">
            <summary>The machine name.</summary>  
        </member>
        <member name="F:WordEngineering.UtilityEventLog.EventLogSource">
            <summary>The event source.</summary>  
        </member>
        <member name="M:WordEngineering.UtilityEventLog.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">A list of command line arguments</param>
        </member>
        <member name="M:WordEngineering.UtilityEventLog.WriteEntry(System.String,System.String,System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>Write entry.</summary>
            <param name="log">The event log name.</param>
            <param name="machineName">The name of the event log.</param>
            <param name="source">The name of the event source.</param>  
            <param name="messageText">The message text.</param>
            <param name="eventLogEntryType">The event log entry type, for example, Error, FailureAudit, Information, SuccessAudit, Warning.</param>  
        </member>
        <member name="M:WordEngineering.UtilityEventLog.WriteEntryOleDbErrorCollection(System.Data.OleDb.OleDbException)">
            <summary>Write the OleDb Error Collection.</summary>
            <param name="exception">The OLEDBException.</param>    
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              OleDbConnection oleDbConnection          = null;
              try
              {
               oleDbConnection = new OleDbConnection(databaseConnectionString);
               oleDbConnection.Open();
              }//try
              catch (OleDbException exception)
              {
               exceptionMessage = WriteEntryOleDbErrorCollection(exception);
               System.Console.WriteLine("OLEDbException: {0}", exceptionMessage);
              }
             </example>  
            </code>  
        </member>
        <member name="M:WordEngineering.UtilityEventLog.WriteEntryOleDbErrorCollection(System.String,System.String,System.String,System.Data.OleDb.OleDbException)">
            <summary>Write the OleDb Error Collection.</summary>
            <param name="log">The event log name, for example, Application, Security, System, DNS Server.</param>
            <param name="machineName">The machine name, for example, . for this particular machine name.</param>  
            <param name="source">The source of the event, for example, SQLServerAgent.</param>  
            <param name="exception">The OLEDBException.</param>    
            <code>
             <example>
              string          databaseConnectionString = "Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=WordEngineering;Integrated Security=SSPI;";
              string          exceptionMessage         = null;
              OleDbConnection oleDbConnection          = null;
              try
              {
               oleDbConnection = new OleDbConnection(databaseConnectionString);
               oleDbConnection.Open();
              }//try
              catch (OleDbException exception)
              {
               exceptionMessage = WriteEntryOleDbErrorCollection( "Application", ".", "WordEngineering", exception );
               System.Console.WriteLine("OLEDbException: {0}", exceptionMessage);
              }
             </example>  
            </code>  
        </member>
        <member name="T:WordEngineering.UtilityFile">
            <summary>UtilityFile.</summary>
        </member>
        <member name="F:WordEngineering.UtilityFile.FileClassificationRankType">
            <summary>The file rank classification.</summary>
        </member>
        <member name="F:WordEngineering.UtilityFile.FileClassificationRankExtension">
            <summary>The file rank expression.</summary>   
        </member>
        <member name="F:WordEngineering.UtilityFile.FileClassification">
            <summary>The file name strip extension default, false.</summary>
        </member>
        <member name="F:WordEngineering.UtilityFile.FilenameStripExtensionDefault">
            <summary>The file name strip extension default, false.</summary>
        </member>
        <member name="F:WordEngineering.UtilityFile.FilenameExtensionSeparator">
            <summary>The file name extension separator (.).</summary>
        </member>
        <member name="F:WordEngineering.UtilityFile.FilenameDateTimeStringFormat">
            <summary>The file name datetime string format.</summary>
        </member>
        <member name="F:WordEngineering.UtilityFile.FilenameStripWildcard">
            <summary>The file name extension separator (.).</summary>
        </member>
        <member name="M:WordEngineering.UtilityFile.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">Command-line arguments.</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String@)">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String[]@)">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String[]@,System.String[])">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
            <param name="strip">The strip string(s).</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String[]@,System.Boolean,System.Boolean)">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
            <param name="stripWildcard">The strip wildcard flag.</param>
            <param name="stripFilenameExtension">The strip filename extension flag</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String@,System.Boolean,System.Boolean)">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
            <param name="stripWildcard">The strip wildcard flag.</param>
            <param name="stripFilenameExtension">The strip filename extension flag</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String@,System.String,System.Boolean)">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
            <param name="stripWildcard">The strip wildcard flag.</param>
            <param name="stripFilenameExtension">The strip filename extension flag</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Strip(System.String[]@,System.String[],System.Boolean)">
            <summary>Strip.</summary>
            <param name="filename">The filename(s).</param>
            <param name="strip">The strip string(s).</param>
            <param name="stripFilenameExtension">The strip filename extension flag</param>
        </member>
        <member name="M:WordEngineering.UtilityFile.Extension(System.String)">
            <summary>The filename extension.</summary>
            <param name="fileType">The file type, for example, HTML, XML, XSD, XSL, XSLT </param>
        </member>
        <member name="T:WordEngineering.UtilityXml">
            <summary>UtilityXml</summary>
            <remarks>UtilityXml.</remarks>
        </member>
        <member name="F:WordEngineering.UtilityXml.XmlMarkupCharacters">
            <summary>The XmlMarkupCharacters.</summary>
        </member>
        <member name="F:WordEngineering.UtilityXml.XMLSubstituteIllegalCharactersWithTheirEscapedLegalEquivalent">
            <summary>The RSS Element channel 3 mandatory elements: title, link and description.</summary>
        </member>
        <member name="F:WordEngineering.UtilityXml.RegexXmlSchemaDatatypeDateTime">
            <summary>Regular expression XML Schema Data Type for the DateTime.</summary>
        </member>
        <member name="M:WordEngineering.UtilityXml.XmlDocumentNodeInnerText(System.String,System.String@,System.String,System.String@)">
            <summary>Read a particular XmlNode's outer text.</summary>
            <param name="filenameXml">XML filename.</param>
            <param name="exceptionMessage">Exception Message.</param>  
            <param name="xPathExpression">XPath expression.</param>    
            <param name="defaultSetting">Default setting.</param>      
        </member>
        <member name="M:WordEngineering.UtilityXml.SelectNodes(System.String,System.String@,System.String)">
            <summary>Read a particular XmlNode's outer text.</summary>
            <param name="filenameXml">XML filename.</param>
            <param name="exceptionMessage">Exception Message.</param>  
            <param name="xPathExpression">XPath expression.</param>    
        </member>
        <member name="M:WordEngineering.UtilityXml.SelectNodes(System.String,System.String@,System.String,System.Xml.XmlNodeList@)">
            <summary>Read a particular XmlNode's outer text.</summary>
            <param name="filenameXml">XML filename.</param>
            <param name="exceptionMessage">Exception Message.</param>
            <param name="xPathExpression">XPath expression.</param>
            <param name="xmlNodeList">XML node list.</param>  
        </member>
        <member name="M:WordEngineering.UtilityXml.Convert(System.Xml.XmlNodeList,System.String[]@,System.String@)">
            <summary>Convert.</summary>
            <param name="xmlNodeList">XML Node List format.</param>
            <param name="innerXml">innerXml.</param>    
            <param name="exceptionMessage">Exception message.</param>  
        </member>
        <member name="M:WordEngineering.UtilityXml.WriteXml(System.Data.DataSet,System.String@)">
            <summary>Write XML.</summary>
             <param name="dataSet">Dataset.</param>  
             <param name="exceptionMessage">Exception Message.</param>
        </member>
        <member name="M:WordEngineering.UtilityXml.WriteXmlStylesheet(System.String@,System.String@,System.String@)">
            <summary>Write XMLStylesheet.</summary>
             <param name="exceptionMessage">Exception Message.</param>
             <param name="filenameXml">Filename XML.</param>
             <param name="filenameStylesheet">Filename Stylesheet (XSLT).</param>
        </member>
        <member name="M:WordEngineering.UtilityXml.WriteXml(System.Data.DataSet,System.String@,System.String@,System.String@)">
            <summary>Write XML.</summary>
             <param name="dataSet">Dataset.</param>  
             <param name="exceptionMessage">Exception Message.</param>
             <param name="filenameXml">Filename XML.</param>
             <param name="filenameStylesheet">Filename Stylesheet (XSLT).</param>
        </member>
        <member name="M:WordEngineering.UtilityXml.ReadXml(System.Data.DataSet@,System.String@,System.String@)">
            <summary>Read XML.</summary>
             <param name="dataSet">Dataset.</param>  
             <param name="exceptionMessage">Exception Message.</param>
             <param name="filenameXml">Filename XML.</param>
        </member>
        <member name="M:WordEngineering.UtilityXml.Main(System.String[])">
            <summary>The entry point for the application.</summary>
            <param name="argv">A list of command line arguments</param>
        </member>
        <member name="M:WordEngineering.UtilityXml.IsValidRegexXmlSchemaDatatypeDateTime(System.String)">
            <summary>Valid Xml Datetime</summary>
             <param name="datetime">Datetime.</param>  
        </member>
        <member name="M:WordEngineering.UtilityXml.XmlSignificantWhitespace(System.String@)">
            <summary>Xml Significant Whitespace</summary>
            <param name="innerText">InnerXml</param>  
        </member>
        <member name="M:WordEngineering.UtilityXml.FormatForXML(System.Object)">
            <summary>FormatForXML.</summary>
        </member>
        <member name="M:WordEngineering.UtilityXml.#cctor">
            <summary>Static.</summary>
        </member>
    </members>
</doc>
